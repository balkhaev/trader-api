import express from "express"
import cors from "cors"
import { GroqAgentManager, ProviderType } from "./agents/agent-manager"
import { NewsData, TweetData } from "./types/index"
import { GROQ_API_KEY } from "./utils/env"

const app = express()
const PORT = process.env.PORT ? parseInt(process.env.PORT) : 3003

if (!GROQ_API_KEY) {
  throw new Error("‚ö†Ô∏è GROQ_API_KEY –Ω–µ –∑–∞–¥–∞–Ω")
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
const groqAgentManager = new GroqAgentManager(GROQ_API_KEY)

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ middleware
app.use(cors())
app.use(express.json({ limit: "10mb" }))
app.use(express.urlencoded({ extended: true }))

// Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get("/health", (req, res) => {
  res.json({
    status: "ok",
    service: "ai-agents",
    timestamp: new Date().toISOString(),
    providers: {
      groq: !!GROQ_API_KEY,
    },
  })
})

// Endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π - —Ç–æ–ª—å–∫–æ OpenAI)
app.post("/analyze/news", async (req, res) => {
  try {
    const newsData: NewsData = req.body

    if (!newsData.title || !newsData.content) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è title –∏ content –Ω–µ –∑–∞–¥–∞–Ω—ã",
      })
      return
    }

    const result = await groqAgentManager.analyzeNews(newsData)

    if (!result) {
      res.status(500).json({
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å",
      })
      return
    }

    res.json({
      success: true,
      data: result,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// Endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π - —Ç–æ–ª—å–∫–æ OpenAI)
app.post("/analyze/tweet", async (req, res) => {
  try {
    const tweetData: TweetData = req.body

    if (!tweetData.text) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ text –Ω–µ –∑–∞–¥–∞–Ω–æ",
      })
      return
    }

    const result = await groqAgentManager.analyzeTweet(tweetData)

    if (!result) {
      res.status(500).json({
        error: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–∏—Ç",
      })
      return
    }

    res.json({
      success: true,
      data: result,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–∞:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
app.post("/v2/analyze/news", async (req, res) => {
  try {
    const { data: newsData, provider = "openai" } = req.body as {
      data: NewsData
      provider?: ProviderType
    }

    if (!newsData.title || !newsData.content) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è title –∏ content –Ω–µ –∑–∞–¥–∞–Ω—ã",
      })
      return
    }

    if (provider === "groq" && !groqAgentManager) {
      res.status(400).json({
        error: "Groq –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GROQ_API_KEY",
      })
      return
    }

    const result = await groqAgentManager.analyzeNews(newsData, "groq")

    if (!result) {
      res.status(500).json({
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å —Å –ø–æ–º–æ—â—å—é ${provider}`,
      })
      return
    }

    res.json({
      success: true,
      provider,
      data: result,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–∏:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
app.post("/v2/analyze/tweet", async (req, res) => {
  try {
    const { data: tweetData, provider = "openai" } = req.body as {
      data: TweetData
      provider?: ProviderType
    }

    if (!tweetData.text) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ text –Ω–µ –∑–∞–¥–∞–Ω–æ",
      })
      return
    }

    if (provider === "groq" && !groqAgentManager) {
      res.status(400).json({
        error: "Groq –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GROQ_API_KEY",
      })
      return
    }

    const result = await groqAgentManager.analyzeTweet(tweetData, "groq")

    if (!result) {
      res.status(500).json({
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–≤–∏—Ç —Å –ø–æ–º–æ—â—å—é ${provider}`,
      })
      return
    }

    res.json({
      success: true,
      provider,
      data: result,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–∏—Ç–∞:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// Endpoint –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
app.post("/compare", async (req, res) => {
  try {
    const { type, data } = req.body

    if (!type || !data) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è type –∏ data –Ω–µ –∑–∞–¥–∞–Ω—ã",
      })
      return
    }

    if (type !== "news" && type !== "tweet") {
      res.status(400).json({
        error: "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å news –∏–ª–∏ tweet",
      })
      return
    }

    if (!groqAgentManager) {
      res.status(400).json({
        error: "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GROQ_API_KEY",
      })
      return
    }

    const results = await groqAgentManager.compareProviders({ type, data })

    res.json({
      success: true,
      comparison: results,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π)
app.post("/analyze", async (req, res) => {
  try {
    const {
      type,
      data,
      provider = "groq",
    } = req.body as {
      type: "news" | "tweet"
      data: NewsData | TweetData
      provider?: ProviderType
    }

    if (!type || !data) {
      res.status(400).json({
        error: "–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è type –∏ data –Ω–µ –∑–∞–¥–∞–Ω—ã",
      })
      return
    }

    if (type !== "news" && type !== "tweet") {
      res.status(400).json({
        error: "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å news –∏–ª–∏ tweet",
      })
      return
    }

    if (provider === "groq" && !groqAgentManager) {
      res.status(400).json({
        error: "Groq –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ GROQ_API_KEY",
      })
      return
    }

    const result = await groqAgentManager.analyzeContent({
      type,
      data,
      provider,
    })

    if (!result) {
      res.status(500).json({
        error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é ${provider}`,
      })
      return
    }

    res.json({
      success: true,
      provider,
      data: result,
    })
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:", error)
    res.status(500).json({
      error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
    })
  }
})

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ
app.get("/info", (req, res) => {
  res.json({
    service: "AI Agents Service",
    version: "2.0.0",
    description:
      "–°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Ç–≤–∏—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é AI –∞–≥–µ–Ω—Ç–æ–≤ (OpenAI –∏ Groq)",
    providers: {
      groq: !!GROQ_API_KEY,
    },
    endpoints: [
      "GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
      "GET /info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–µ",
      "POST /analyze/news - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π (OpenAI)",
      "POST /analyze/tweet - –∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤ (OpenAI)",
      "POST /v2/analyze/news - –∞–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
      "POST /v2/analyze/tweet - –∞–Ω–∞–ª–∏–∑ —Ç–≤–∏—Ç–æ–≤ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
      "POST /analyze - —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –≤—ã–±–æ—Ä–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞",
      "POST /compare - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ OpenAI –∏ Groq",
    ],
  })
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
export const startServer = (): void => {
  app.listen(PORT, () => {
    console.log(`üöÄ AI Agents —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
    console.log(`üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã:`)
    console.log(`   Groq: ${GROQ_API_KEY ? "‚úÖ" : "‚ùå"}`)
    console.log(`üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:`)
    console.log(`   GET  http://localhost:${PORT}/health`)
    console.log(`   GET  http://localhost:${PORT}/info`)
    console.log(`   POST http://localhost:${PORT}/analyze/news`)
    console.log(`   POST http://localhost:${PORT}/analyze/tweet`)
    console.log(`   POST http://localhost:${PORT}/v2/analyze/news`)
    console.log(`   POST http://localhost:${PORT}/v2/analyze/tweet`)
    console.log(`   POST http://localhost:${PORT}/analyze`)
    console.log(`   POST http://localhost:${PORT}/compare`)
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Express (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export const getApp = (): express.Application => {
  return app
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (import.meta.url === `file://${process.argv[1]}`) {
  startServer()
}
