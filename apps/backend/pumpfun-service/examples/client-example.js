const axios = require("axios");
const io = require("socket.io-client");

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_BASE_URL = "http://localhost:3003";
const WS_URL = "http://localhost:3003/pumpportal";

class PumpPortalClient {
  constructor() {
    this.apiClient = axios.create({
      baseURL: API_BASE_URL,
      timeout: 30000,
    });

    this.socket = null;
    this.isConnected = false;
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
  async connectWebSocket() {
    return new Promise((resolve, reject) => {
      this.socket = io(WS_URL);

      this.socket.on("connect", () => {
        console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω");
        this.isConnected = true;
        resolve();
      });

      this.socket.on("connected", (data) => {
        console.log("üì° –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ:", data);
      });

      this.socket.on("disconnect", () => {
        console.log("‚ùå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
        this.isConnected = false;
      });

      this.socket.on("error", (error) => {
        console.error("üö® WebSocket –æ—à–∏–±–∫–∞:", error);
        reject(error);
      });

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
      this.setupEventHandlers();
    });
  }

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
  setupEventHandlers() {
    this.socket.on("tokenCreated", (data) => {
      console.log("üÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω:", {
        symbol: data.data.symbol,
        name: data.data.name,
        mint: data.data.mint,
        dev: data.data.dev,
        timestamp: data.timestamp,
      });
    });

    this.socket.on("tokenTrade", (data) => {
      console.log("üí∞ –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞:", {
        type: data.data.txType,
        mint: data.data.mint,
        sol: data.data.sol,
        tokenAmount: data.data.tokenAmount,
        trader: data.data.traderPublicKey,
        timestamp: data.timestamp,
      });
    });

    this.socket.on("migration", (data) => {
      console.log("üöÄ –ú–∏–≥—Ä–∞—Ü–∏—è –≤ Raydium:", {
        symbol: data.data.symbol,
        mint: data.data.mint,
        timestamp: data.timestamp,
      });
    });

    this.socket.on("subscribed", (data) => {
      console.log("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞:", data);
    });

    this.socket.on("unsubscribed", (data) => {
      console.log("‚ùå –û—Ç–ø–∏—Å–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞:", data);
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
  async subscribeToNewTokens() {
    if (!this.isConnected) {
      throw new Error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    }

    this.socket.emit("subscribe", {
      method: "subscribeNewToken",
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–¥–µ–ª–∫–∏ —Ç–æ–∫–µ–Ω–∞
  async subscribeToTokenTrades(tokenMints) {
    if (!this.isConnected) {
      throw new Error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    }

    this.socket.emit("subscribe", {
      method: "subscribeTokenTrade",
      keys: tokenMints,
    });
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
  async subscribeToMigrations() {
    if (!this.isConnected) {
      throw new Error("WebSocket –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω");
    }

    this.socket.emit("subscribe", {
      method: "subscribeMigration",
    });
  }

  // Lightning —Ç–æ—Ä–≥–æ–≤–ª—è
  async lightningTrade(tradeData) {
    try {
      console.log("‚ö° –í—ã–ø–æ–ª–Ω—è—é Lightning Trade:", tradeData);

      const response = await this.apiClient.post(
        "/trading/lightning",
        tradeData,
      );

      console.log("‚úÖ Lightning Trade —Ä–µ–∑—É–ª—å—Ç–∞—Ç:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ Lightning Trade:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
  async createLocalTransaction(tradeData) {
    try {
      console.log("üîß –°–æ–∑–¥–∞—é –ª–æ–∫–∞–ª—å–Ω—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:", tradeData);

      const response = await this.apiClient.post("/trading/local", tradeData);

      console.log("‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–∫–µ–Ω–µ
  async getTokenInfo(mint) {
    try {
      const response = await this.apiClient.get(`/trading/tokens/${mint}`);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–∫–µ–Ω–∞
  async getTokenStats(mint) {
    try {
      const response = await this.apiClient.get(
        `/trading/tokens/${mint}/stats`,
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ–∫–µ–Ω–∞:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
  async getTokens(limit = 10, offset = 0) {
    try {
      const response = await this.apiClient.get(
        `/trading/tokens?limit=${limit}&offset=${offset}`,
      );
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
  async getLatestTrades(mint = null, limit = 10) {
    try {
      const url = mint
        ? `/trading/trades?mint=${mint}&limit=${limit}`
        : `/trading/trades?limit=${limit}`;

      const response = await this.apiClient.get(url);
      return response.data;
    } catch (error) {
      console.error(
        "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫:",
        error.response?.data || error.message,
      );
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
  async checkHealth() {
    try {
      const response = await this.apiClient.get("/health");
      console.log("üè• –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞:", response.data);
      return response.data;
    } catch (error) {
      console.error("‚ùå –°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:", error.message);
      throw error;
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ
  disconnect() {
    if (this.socket) {
      this.socket.disconnect();
      console.log("üëã WebSocket –æ—Ç–∫–ª—é—á–µ–Ω");
    }
  }
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async function main() {
  const client = new PumpPortalClient();

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ä–≤–∏—Å–∞
    await client.checkHealth();

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket
    await client.connectWebSocket();

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    await client.subscribeToNewTokens();
    await client.subscribeToMigrations();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤
    const tokens = await client.getTokens(5);
    console.log("üìä –¢–æ–ø —Ç–æ–∫–µ–Ω—ã:", tokens);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏
    const trades = await client.getLatestTrades(null, 5);
    console.log("üíπ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–¥–µ–ª–∫–∏:", trades);

    // –ü—Ä–∏–º–µ—Ä Lightning Trade (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
    /*
    const lightningTradeResult = await client.lightningTrade({
      action: 'buy',
      mint: 'HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC',
      amount: 0.01,
      denominatedInSol: true,
      slippage: 10,
      priorityFee: 0.00005,
      pool: 'auto'
    });
    */

    // –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω)
    /*
    const localTxResult = await client.createLocalTransaction({
      publicKey: 'YourWalletPublicKey...',
      action: 'buy',
      mint: 'HeLp6NuQkmYB4pYWo2zYs22mESHXPQYzXbB8n4V98jwC',
      amount: 0.01,
      denominatedInSol: true,
      slippage: 10,
      priorityFee: 0.00005,
      pool: 'pump'
    });
    */

    console.log("üéâ –ö–ª–∏–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω! –û–∂–∏–¥–∞—é —Å–æ–±—ã—Ç–∏—è...");
    console.log("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞");

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
    process.on("SIGINT", () => {
      console.log("\nüëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...");
      client.disconnect();
      process.exit(0);
    });
  } catch (error) {
    console.error("üö® –û—à–∏–±–∫–∞:", error.message);
    client.disconnect();
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞
if (require.main === module) {
  main();
}

module.exports = PumpPortalClient;
